#include "ccconfig.h"
#include <Arduino.h>
#include <FastLED.h>
#include <driver/i2s.h>

extern "C"
{
#include "DFT32.h"
#include "embeddednf.h"
#include "embeddedout.h"
}

// Configuration
#define I2S_PORT I2S_NUM_0
#define I2S_MIC_WS GPIO_NUM_40
#define I2S_MIC_SD GPIO_NUM_39
#define SAMPLE_RATE 16000 
#define BUFFER_SIZE 1024

// LED Configuration
#define LED_PIN 21
#define COLOR_ORDER GRB
#define NUM_LIN_LEDS 300
CRGB leds[NUM_LIN_LEDS];

// Audio buffers
int16_t sampbuff[BUFFER_SIZE];
volatile int last_samp_pos = 0;
volatile int samples = 0;

// ColorChord interface
uint8_t ledOut[NUM_LIN_LEDS * 3];

void setup_audio()
{
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_PDM),
    .sample_rate = 16000, // Set to desired sample rate
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8, // Increase buffer count to prevent overflow
    .dma_buf_len = 256, // Smaller buffers reduce latency
    .use_apll = true, // Use APLL for accurate clock
    .tx_desc_auto_clear = false,
    .fixed_mclk = 0};

  i2s_pin_config_t pin_config = {
      .mck_io_num = I2S_PIN_NO_CHANGE,
      .bck_io_num = I2S_PIN_NO_CHANGE,
      .ws_io_num = I2S_MIC_WS,
      .data_out_num = I2S_PIN_NO_CHANGE,
      .data_in_num = I2S_MIC_SD};

  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_PORT, &pin_config);
}

extern "C" void NewFrame()
{
  HandleFrameInfo();
  UpdateLinearLEDs();

  for (int i = 0; i < NUM_LIN_LEDS; i++)
  {
    leds[i].r = ledOut[i * 3 + 0];
    leds[i].g = ledOut[i * 3 + 1];
    leds[i].b = ledOut[i * 3 + 2];
  }
  FastLED.show();
}

void setup()
{
  Serial.begin(115200);
  FastLED.addLeds<WS2812B, LED_PIN, COLOR_ORDER>(leds, NUM_LIN_LEDS);
  FastLED.setBrightness(128);

  // Initialize microphone
  setup_audio();

  // Initialize ColorChord
  InitColorChord();
  // was 3
  RootNoteOffset = 0;

  // LED test
  leds[0] = CRGB::Red;
  FastLED.show();
  delay(100);
  leds[0] = CRGB::Black;
  FastLED.show();
  leds[0] = CRGB::Green;
  FastLED.show();
  delay(100);
  leds[0] = CRGB::Black;
  FastLED.show();
  leds[0] = CRGB::Blue;
  FastLED.show();
  delay(100);
  leds[0] = CRGB::Black;
  FastLED.show();

  Serial.printf("Startup complete\n");
}

void loop()
{
  static size_t bytes_read;
  static int16_t raw_samples[BUFFER_SIZE];
  static unsigned long last_debug = 0;
  static int wf = 0;

  // Read I2S data
  i2s_read(I2S_PORT, raw_samples, sizeof(raw_samples), &bytes_read, portMAX_DELAY);
  int samples_read = bytes_read / sizeof(int16_t);

  // Process samples
  for (int i = 0; i < samples_read; i++)
  {
    sampbuff[last_samp_pos] = raw_samples[i];
    last_samp_pos = (last_samp_pos + 1) % BUFFER_SIZE;
    samples++;

    PushSample32(raw_samples[i]);

    if (++wf >= 512) // Adjust from 128 to 512 to reduce frame rate

    {
      NewFrame();
      wf = 0;
      
      // Serial.print(">");
      // Serial.print("c:");
      // Serial.print(i);
      // Serial.print(",s:");
      // Serial.print(raw_samples[i]);
      // Serial.println();

    }
  }

  // Debug output
  if (millis() - last_debug > 1000)
  {
    Serial.printf("Samples: %d | Buffer pos: %d\n", samples, last_samp_pos);
    last_debug = millis();
  }
}
